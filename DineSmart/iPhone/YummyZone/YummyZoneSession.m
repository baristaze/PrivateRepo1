//
//  YummyZoneSession.m
//  YummyZone
//
//  Created by Mustafa Demirhan on 2/14/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "YummyZoneSession.h"
#import "ASIHTTPRequest.h"
#import "MyPathHelper.h"
#import "KeyConstants.h"
#import "YummyZoneUrls.h"
#import "ASIFormDataRequest.h"
#import "NSDictionary+Helpers.h"
#import "YummyZoneHelper.h"
#import "DictionaryHelper.h"

@interface YummyZoneSession(private)
- (void)loadAccountSettingsFromDisk;
- (void)saveAccountSettingsToDisk;
- (NSString*)doSignInOrSignUp:(NSURL*)url username:(NSString*)username password:(NSString*)password putCurrentCookie:(BOOL)putCurrentCookie;
@end

@implementation YummyZoneSession

static YummyZoneSession *_yummyZoneSession;

// Initialize the singleton instance if needed and return
+ (YummyZoneSession*)singleton
{
	// @synchronized(self)
	{
		if (!_yummyZoneSession)
			_yummyZoneSession = [[YummyZoneSession alloc] init];
		
		return _yummyZoneSession;
	}
}


+ (id)alloc
{
	//	@synchronized(self)
	{
		NSAssert(_yummyZoneSession == nil, @"Attempted to allocate a second instance of a singleton.");
		_yummyZoneSession = [super alloc];
		return _yummyZoneSession;
	}
}


+ (id)copy
{
	//	@synchronized(self)
	{
		NSAssert(_yummyZoneSession == nil, @"Attempted to copy the singleton.");
		return _yummyZoneSession;
	}
}


+ (void)initialize
{
    static BOOL initialized = NO;
    if (!initialized)
	{
        initialized = YES;
    }
}


- (id)init
{
    self = [super init];
	if (self)
	{
        _httpHeaders = [[NSMutableDictionary alloc] init];
        [_httpHeaders setObject:@"text/xml" forKey:@"Content-Type"];

        _queue = [[NSOperationQueue alloc] init];

        _username = nil;
        _password = nil;
        _cookie = nil;
        _isAutogenerated = YES;
        
        _settingsEnableFacebook = FALSE;
        _settingsEnableTwitter = FALSE;
        
        [self loadAccountSettingsFromDisk];
    }
	return self;
}


- (void)dealloc
{
    [_username release];
    [_password release];
    [_cookie release];
    [_queue cancelAllOperations];
    [_queue release];
    [_httpHeaders release];
	[super dealloc];
}


// Account settings are saved to disk only if the signup was successful
- (void)loadAccountSettingsFromDisk
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    
    [_username release];
    [_password release];
    [_cookie release];
    _username = nil;
    _password = nil;
    _cookie = nil;
    _isAutogenerated = YES;
    
    _settingsEnableFacebook = FALSE;
    _settingsEnableTwitter = FALSE;
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithContentsOfFile:[MyPathHelper filePathForAccountInfo]];
    if (dict != nil)
    {
        if ([dict objectForKey:kKeyUsername] != nil &&
            [dict objectForKey:kKeyPassword] != nil &&
            [dict objectForKey:kKeyAutogenerated] != nil)
        {
            _username = [[dict objectForKey:kKeyUsername] copy];
            _password = [[dict objectForKey:kKeyPassword] copy];
            NSNumber *number = [dict objectForKey:kKeyAutogenerated];
            _isAutogenerated = [number boolValue];
            
            NSLog(@"Loaded account settings. Username: %@, isAutoGenerated: %d", _username, _isAutogenerated);
        }
    }
    
	[pool release];
}


- (void)saveAccountSettingsToDisk
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    
    // Save if and only if we could sign up successfully
    if (_cookie != nil)
    {
        NSMutableDictionary *dict = [[[NSMutableDictionary alloc] init] autorelease];
        [dict setObject:_username forKey:kKeyUsername];
        [dict setObject:_password forKey:kKeyPassword];
        [dict setObject:[NSNumber numberWithBool:_isAutogenerated] forKey:kKeyAutogenerated];
        [dict writeToFile:[MyPathHelper filePathForAccountInfo] atomically:YES];
        
        NSLog(@"Saved account settings. Username: %@, isAutoGenerated: %d", _username, _isAutogenerated);
    }
    
	[pool release];
}


- (NSString*)doSignInOrSignUp:(NSURL *)url username:(NSString *)username password:(NSString *)password putCurrentCookie:(BOOL)putCurrentCookie
{
    if (putCurrentCookie && _cookie == nil)
    {
        return [NSString stringWithFormat:@"Failed to sign in or sign up. Current cookie empty."];
    }
    
    if (username == nil || password == nil)
    {
        return [NSString stringWithFormat:@"Failed to sign in. Username or password is empty."];
    }

    NSString *errorString = nil;
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    
    NSMutableDictionary *dict = [[[NSMutableDictionary alloc] init] autorelease];
    [dict setObject:username forKey:kKeyUsername];
    [dict setObject:password forKey:kKeyPassword];

    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];
    [request setHTTPMethod:@"POST"];
    [request setValue:@"text/xml" forHTTPHeaderField:@"Content-Type"];
    if (putCurrentCookie)
    {
        [request setValue:[NSString stringWithFormat:@"Basic %@", _cookie] forHTTPHeaderField:@"Authorization"];
    }
    [request setHTTPBody:[DictionaryHelper getDictionaryContentsForHttpPost:dict]];
    
    NSURLResponse *response = nil;
    NSError *error = nil;
    NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    
    if (error) 
    {
        NSLog(@"%@", error);
        errorString = [[NSString stringWithFormat:@"Failed to connect to the server."] copy];
    }
    else
    {
        NSDictionary *dict = [NSDictionary dictionaryWithContentsOfData:data];
        if ([YummyZoneHelper webRequestSucceeded:dict])
        {
            if ([dict objectForKey:kKeyCookie] != nil)
            {
                [_cookie release];
                _cookie = [[dict objectForKey:kKeyCookie] copy];
                [_httpHeaders setObject:[NSString stringWithFormat:@"Basic %@", _cookie] forKey:@"Authorization"];
                
                [self updateSettingsWith:dict];
            }
            else
            {
                errorString = [[NSString stringWithFormat:@"Failed to sign in or sign up. Server returned an empty cookie."] copy];
            }
        }
        else
        {
            NSString *serverMessage = [YummyZoneHelper getOperationErrorMessage:dict];
            if (serverMessage != nil)
            {
                errorString = [[NSString stringWithFormat:@"Failed to sign in or sign up. Server returned failure: %@.", serverMessage] copy];
            }
            else
            {
                errorString = [[NSString stringWithFormat:@"Failed to sign in or sign up. Server returned failure."] copy];
            }
        }
    }
    
    [pool release];
    
    if (errorString != nil)
    {
        [errorString autorelease];
    }
    return errorString;
}


- (void) updateSettingsWith:(NSDictionary*) dict
{
    if([dict objectForKey:kKeySettings] != nil)
    {
        NSDictionary *settings = [dict objectForKey:kKeySettings];
        
        if([settings objectForKey:kKeyEnableFacebook] != nil)
        {
            NSNumber* enableFB = (NSNumber*)[settings objectForKey:kKeyEnableFacebook];
            if([enableFB isEqualToNumber:[NSNumber numberWithInt:1]])
            {
                _settingsEnableFacebook = TRUE;
            }
        }
        
        if([settings objectForKey:kKeyEnableTwitter] != nil)
        {
            NSNumber* enableTwitter = (NSNumber*)[settings objectForKey:kKeyEnableTwitter];
            if([enableTwitter isEqualToNumber:[NSNumber numberWithInt:1]])
            {
                _settingsEnableTwitter = TRUE;
            }
        }
    }
}

- (NSString*)obtainAuthorizationCookie
{
    [_cookie release];
    _cookie = nil;
    
    // First time user
    if (_username == nil || _password == nil)
    {
        // Generate a random username and password
        [_username release];
        [_password release];

        _username = (NSString*)CFUUIDCreateString(NULL, CFUUIDCreate(NULL));
        _password = (NSString*)CFUUIDCreateString(NULL, CFUUIDCreate(NULL));
        _isAutogenerated = YES;
        
        NSString *errorString = [self doSignInOrSignUp:[YummyZoneUrls urlForSignUp1] username:_username password:_password putCurrentCookie:NO];
        if (errorString == nil)
        {
            // We have successfully obtained a cookie. This is a valid account. Save to disk.
            NSLog(@"Signed in. Username: %@, isAutoGenerated: %d", _username, _isAutogenerated);
            [self saveAccountSettingsToDisk];
        }
        else
        {
            // We failed. Clean up the username and password and we will regenerate
            // on the next attempt.
            [_username release];
            [_password release];
            _username = nil;
            _password = nil;
        }
        
        return errorString;
    }
    else
    {
        // We have a username and password. Use signin1 API to get the cookie.
        NSString *errorString = [self doSignInOrSignUp:[YummyZoneUrls urlForSignIn1] username:_username password:_password putCurrentCookie:NO];
        if (errorString == nil)
        {
            // We have successfully obtained a cookie. This is a valid account. Save to disk.
            NSLog(@"Signed in. Username: %@, isAutoGenerated: %d", _username, _isAutogenerated);
            [self saveAccountSettingsToDisk];
        }
        return errorString;
    }
}


- (NSString*)singinAndMergeTemporaryAccount:(NSString*)username password:(NSString*)password
{
    if (_cookie == nil)
    {
        return [NSString stringWithFormat:@"Failed to sign in. Cookie empty."];
    }
    
    if (username == nil || password == nil)
    {
        return [NSString stringWithFormat:@"Failed to sign in. Username or password is empty."];
    }
    
    NSString *errorString = [self doSignInOrSignUp:[YummyZoneUrls urlForSignIn2] username:username password:password putCurrentCookie:YES];
    if (errorString == nil)
    {
        // We have successfully obtained a cookie. This is a valid account. Save to disk.
        _isAutogenerated = NO;
        [_username release];
        [_password release];
    
        _username = [username copy];
        _password = [password copy];
        
        NSLog(@"Signed in and merged. Username: %@, isAutoGenerated: %d", _username, _isAutogenerated);
        [self saveAccountSettingsToDisk];
    }
    return errorString;
}


- (NSString*)signupAndMergeTemporaryAccount:(NSString*)username password:(NSString*)password
{
    if (_cookie == nil)
    {
        return [NSString stringWithFormat:@"Failed to sign in. Cookie empty."];
    }
    
    if (username == nil || password == nil)
    {
        return [NSString stringWithFormat:@"Failed to sign in. Username or password is empty."];
    }

    NSString *errorString = [self doSignInOrSignUp:[YummyZoneUrls urlForSignUp2] username:username password:password putCurrentCookie:YES];
    if (errorString == nil)
    {
        // We have successfully obtained a cookie. This is a valid account. Save to disk.
        _isAutogenerated = NO;
        [_username release];
        [_password release];
        
        _username = [username copy];
        _password = [password copy];
        
        NSLog(@"Signed up and merged. Username: %@, isAutoGenerated: %d", _username, _isAutogenerated);
        [self saveAccountSettingsToDisk];
    }
    return errorString;
}


- (BOOL)isUsingTemporaryAccount
{
    return _isAutogenerated;
}


- (NSString*)getUserName
{
    return _username;
}


- (NSDictionary*)getHttpHeaders
{
    return _httpHeaders;
}


- (void)queueAsyncRequest:(NSURL*)url useDefaultHeaders:(BOOL)useDefaultHeaders
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];
    [request setDelegate:self];
    [request setDidFinishSelector:@selector(requestDone:)];
    [request setDidFailSelector:@selector(requestWentWrong:)];
    if (useDefaultHeaders && _httpHeaders != nil)
    {
        for (NSString *key in _httpHeaders)
        {
            [request addRequestHeader:key value:[_httpHeaders objectForKey:key]];
        }
    }
    [_queue addOperation:request];
    
    [pool release];
}


- (void)requestDone:(ASIHTTPRequest *)request
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    
    NSString *response = [request responseString];
    NSLog(@"requestDone: %@", response);
    
    [pool release];
}


- (void)requestWentWrong:(ASIHTTPRequest *)request
{
    NSError *error = [request error];
    NSLog(@"requestWentWrong: %@", error);
}

- (BOOL) getSettingsEnableFacebook
{
    return _settingsEnableFacebook;
}

- (void) setSettingsEnableFacebook:(BOOL)enableFacebook
{
    _settingsEnableFacebook = enableFacebook;
}

- (BOOL) getSettingsEnableTwitter
{
    return _settingsEnableTwitter;
}

- (void) setSettingsEnableTwitter:(BOOL)enableTwitter
{
    _settingsEnableTwitter = enableTwitter;
}

@end
